{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/lib.npmtest_cordova_plugin_push_notification.js":"/* istanbul instrument in package npmtest_cordova_plugin_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_push_notification = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_push_notification = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-push-notification && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_push_notification */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_push_notification\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_push_notification.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_push_notification.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_push_notification.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_push_notification.__dirname + '/lib.npmtest_cordova_plugin_push_notification.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/node_modules/cordova-plugin-push-notification/www/PushNotification.js":"var PushNotification = function() {};\n\n\n// Call this to register for push notifications. Content of [options] depends on whether we are working with APNS (iOS) or GCM (Android)\nPushNotification.prototype.register = function(successCallback, errorCallback, options) {\n  if (errorCallback == null) {\n    errorCallback = function() {}\n  }\n\n  if (typeof errorCallback != \"function\") {\n    console.log(\"PushNotification.register failure: failure parameter not a function\");\n    return\n  }\n\n  if (typeof successCallback != \"function\") {\n    console.log(\"PushNotification.register failure: success callback parameter must be a function\");\n    return\n  }\n\n  cordova.exec(successCallback, errorCallback, \"PushPlugin\", \"register\", [options]);\n};\n\n// Call this to unregister for push notifications\nPushNotification.prototype.unregister = function(successCallback, errorCallback, options) {\n  if (errorCallback == null) {\n    errorCallback = function() {}\n  }\n\n  if (typeof errorCallback != \"function\") {\n    console.log(\"PushNotification.unregister failure: failure parameter not a function\");\n    return\n  }\n\n  if (typeof successCallback != \"function\") {\n    console.log(\"PushNotification.unregister failure: success callback parameter must be a function\");\n    return\n  }\n\n  cordova.exec(successCallback, errorCallback, \"PushPlugin\", \"unregister\", [options]);\n};\n\n// Call this if you want to show toast notification on WP8\nPushNotification.prototype.showToastNotification = function(successCallback, errorCallback, options) {\n    if (errorCallback == null) {\n      errorCallback = function() {}\n    }\n\n    if (typeof errorCallback != \"function\") {\n      console.log(\"PushNotification.register failure: failure parameter not a function\");\n      return\n    }\n\n    cordova.exec(successCallback, errorCallback, \"PushPlugin\", \"showToastNotification\", [options]);\n  }\n  // Call this to set the application icon badge\nPushNotification.prototype.setApplicationIconBadgeNumber = function(successCallback, errorCallback, badge) {\n  if (errorCallback == null) {\n    errorCallback = function() {}\n  }\n\n  if (typeof errorCallback != \"function\") {\n    console.log(\"PushNotification.setApplicationIconBadgeNumber failure: failure parameter not a function\");\n    return\n  }\n\n  if (typeof successCallback != \"function\") {\n    console.log(\"PushNotification.setApplicationIconBadgeNumber failure: success callback parameter must be a function\");\n    return\n  }\n\n  cordova.exec(successCallback, errorCallback, \"PushPlugin\", \"setApplicationIconBadgeNumber\", [{\n    badge: badge\n  }]);\n};\n\n//-------------------------------------------------------------------\n\nif (!window.plugins) {\n  window.plugins = {};\n}\nif (!window.plugins.pushNotification) {\n  window.plugins.pushNotification = new PushNotification();\n}\n\nif (typeof module != 'undefined' && module.exports) {\n  module.exports = PushNotification;\n}\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/node_modules/cordova-plugin-push-notification/src/windows8/PushPluginProxy.js":"// Copyright (c) Microsoft Open Technologies, Inc.  Licensed under the MIT license. \n\nmodule.exports = {\n    register: function (success, fail, args) {\n        try {\n            var onNotificationReceived = window[args[0].ecb];\n\n            Windows.Networking.PushNotifications.PushNotificationChannelManager.createPushNotificationChannelForApplicationAsync().then(\n                function (channel) {\n                    channel.addEventListener(\"pushnotificationreceived\", onNotificationReceived);\n                    success(channel);\n            }, fail);\n        } catch(ex) {\n            fail(ex);\n        }\n    }\n};\nrequire(\"cordova/windows8/commandProxy\").add(\"PushPlugin\", module.exports);","/home/travis/build/npmtest/node-npmtest-cordova-plugin-push-notification/node_modules/cordova-plugin-push-notification/www/blackberry10/PushPluginProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\nvar pushServiceObj,\n  ecb;\n\nfunction createChannel(success, error) {\n  if (pushServiceObj) {\n    pushServiceObj.createChannel(function(result, token) {\n      if (result == blackberry.push.PushService.SUCCESS) {\n        if (success) {\n          success({\n            status: result,\n            token: token\n          });\n        }\n      } else {\n        if (result == blackberry.push.PushService.INTERNAL_ERROR) {\n          error(\"Error: An internal error occurred during the create channel. Try registering again.\");\n        } else if (result == blackberry.push.PushService.CREATE_SESSION_NOT_DONE) {\n          error(\"Error: No call to blackberry.push.PushService.create \" + \"was done before creating the channel. It usually means a programming error.\");\n        } else if (result == blackberry.push.PushService.MISSING_PORT_FROM_PPG) {\n          error(\"Error: A port could not be obtained from the \" + \"PPG during the create channel. Try registering again.\");\n        } else if (result == blackberry.push.PushService.INVALID_DEVICE_PIN) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: The PPG obtained the device's PIN during \" + \"the create channel and considered it invalid. Try registering again.\");\n        } else if (result == blackberry.push.PushService.INVALID_PROVIDER_APPLICATION_ID) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: The application ID was considered invalid or missing during the create channel.\");\n        } else if (result == blackberry.push.PushService.INVALID_PPG_SUBSCRIBER_STATE) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: The subscriber on the PPG end reached an \" + \"invalid state. Report this issue to the BlackBerry support team.\");\n        } else if (result == blackberry.push.PushService.EXPIRED_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: An expired authentication token was\" + \"passed to the PPG internally during the create channel. Try registering again.\");\n        } else if (result == blackberry.push.PushService.INVALID_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: An invalid authentication token was passed \" + \"to the PPG internally during the create channel. Report this issue to the BlackBerry support team.\");\n        } else if (result == blackberry.push.PushService.PPG_SUBSCRIBER_LIMIT_REACHED) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: Too many devices have already peformed a \" + \"create channel for this application ID. Contact BlackBerry to increase the subscription limit for this app.\");\n        } else if (result == blackberry.push.PushService.INVALID_OS_VERSION_OR_DEVICE_MODEL_NUMBER) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: This device was found to have an invalid OS \" + \" version or device model number during the create channel. Consider updating the OS on the device.\");\n        } else if (result == blackberry.push.PushService.MISSING_PPG_URL) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: The PPG URL was considered \" + \"invalid or missing during the create channel.\");\n        } else if (result == blackberry.push.PushService.PUSH_TRANSPORT_UNAVAILABLE) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: Create channel failed as the push transport \" + \"is unavailable. Verify your mobile network and/or Wi-Fi are turned on. If they are on, you will \" + \"be notified when the push transport is available again.\");\n        } else if (result == blackberry.push.PushService.PPG_SERVER_ERROR) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: Create channel failed as the PPG is \" + \"currently returning a server error. You will be notified when the PPG is available again.\");\n        } else if (result == blackberry.push.PushService.MISSING_SUBSCRIPTION_RETURN_CODE_FROM_PPG) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: There was an internal issue obtaining \" + \"the subscription return code from the PPG during the create channel. Try registering again.\");\n        } else if (result == blackberry.push.PushService.INVALID_PPG_URL) {\n          // This error code only applies to a consumer application using the public/BIS PPG\n          error(\"Error: The PPG URL was considered invalid during the create channel.\");\n        } else {\n          error(\"Error: Received error code (\" + result + \") when creating channel\");\n        }\n      }\n\n\n    });\n  }\n\n\n}\n\nfunction onInvoked(invokeRequest) {\n  var pushPayload,\n    pushCallback;\n\n  if (invokeRequest.action && invokeRequest.action == \"bb.action.PUSH\") {\n    if (ecb) {\n      pushCallback = eval(ecb);\n\n      if (typeof pushCallback === \"function\") {\n        pushPayload = pushServiceObj.extractPushPayload(invokeRequest);\n        pushCallback(pushPayload);\n      }\n    }\n  }\n}\n\nmodule.exports = {\n\n  register: function(success, error, args) {\n    var ops = args[0],\n      simChangeCallback = ops.simChangeCallback,\n      pushTransportReadyCallback = ops.pushTransportReadyCallback,\n      launchApplicationOnPush = ops.launchApplicationOnPush !== undefined ? ops.launchApplicationOnPush : true;\n\n    ecb = ops.ecb;\n\n    blackberry.push.PushService.create(ops, function(obj) {\n      pushServiceObj = obj;\n\n      // Add an event listener to handle incoming invokes\n      document.addEventListener(\"invoked\", onInvoked, false);\n      pushServiceObj.launchApplicationOnPush(launchApplicationOnPush, function(result) {\n        if (result != blackberry.push.PushService.SUCCESS) {\n          if (result == blackberry.push.PushService.INTERNAL_ERROR) {\n            error(\"Error: An internal error occurred while calling launchApplicationOnPush.\");\n          } else if (result == blackberry.push.PushService.CREATE_SESSION_NOT_DONE) {\n            error(\"Error: Called launchApplicationOnPush without an \" + \"existing session. It usually means a programming error.\");\n          } else {\n            error(\"Error: Received error code (\" + result + \") after calling launchApplicationOnPush.\");\n          }\n        }\n      });\n\n      createChannel(success, error);\n    }, function(result) {\n      if (result == blackberry.push.PushService.INTERNAL_ERROR) {\n        error(\"Error: An internal error occurred while calling \" + \"blackberry.push.PushService.create. Try restarting the application.\");\n      } else if (result == blackberry.push.PushService.INVALID_PROVIDER_APPLICATION_ID) {\n        // This error only applies to consumer applications that use a public/BIS PPG\n        error(\"Error: Called blackberry.push.PushService.create with a missing \" + \"or invalid appId value. It usually means a programming error.\");\n      } else if (result == blackberry.push.PushService.MISSING_INVOKE_TARGET_ID) {\n        error(\"Error: Called blackberry.push.PushService.create with a missing \" + \"invokeTargetId value. It usually means a programming error.\");\n      } else if (result == blackberry.push.PushService.SESSION_ALREADY_EXISTS) {\n        error(\"Error: Called blackberry.push.PushService.create with an appId or \" + \"invokeTargetId value that matches another application. It usually means a \" + \"programming error.\");\n      } else {\n        error(\"Error: Received error code (\" + result + \") after \" + \"calling blackberry.push.PushService.create.\");\n      }\n    }, simChangeCallback, pushTransportReadyCallback);\n  },\n\n  unregister: function(success, error, args) {\n    if (pushServiceObj) {\n      pushServiceObj.destroyChannel(function(result) {\n\n        document.removeEventListener(\"invoked\", onInvoked, false);\n\n        if (result == blackberry.push.PushService.SUCCESS ||\n          result == blackberry.push.PushService.CHANNEL_ALREADY_DESTROYED ||\n          result == blackberry.push.PushService.CHANNEL_ALREADY_DESTROYED_BY_PROVIDER ||\n          result == blackberry.push.PushService.CHANNEL_SUSPENDED_BY_PROVIDER ||\n          result == blackberry.push.PushService.PPG_SUBSCRIBER_NOT_FOUND ||\n          result == blackberry.push.PushService.CREATE_CHANNEL_NOT_DONE) {\n\n          success({\n            status: result\n          });\n        } else {\n          if (result == blackberry.push.PushService.INTERNAL_ERROR) {\n            error(\"Error: An internal error occurred during \" + \"the destroy channel. Try unregistering again.\");\n          } else if (result == blackberry.push.PushService.CREATE_SESSION_NOT_DONE) {\n            error(\"Error: No call to blackberry.push.PushService.create \" + \"was done before destroying the channel. It usually means a programming error.\");\n          } else if (result == blackberry.push.PushService.INVALID_DEVICE_PIN) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: The PPG obtained the device's PIN during \" + \"the destroy channel and considered it invalid. Try unregistering again.\");\n          } else if (result == blackberry.push.PushService.INVALID_PROVIDER_APPLICATION_ID) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: The application ID was considered invalid or missing during the destroy channel.\");\n          } else if (result == blackberry.push.PushService.INVALID_PPG_SUBSCRIBER_STATE) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: The subscriber on the PPG end reached an \" + \"invalid state. Report this issue to the BlackBerry support team.\");\n          } else if (result == blackberry.push.PushService.EXPIRED_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: An expired authentication token was\" + \"passed to the PPG internally during the destroy channel. Try unregistering again.\");\n          } else if (result == blackberry.push.PushService.INVALID_AUTHENTICATION_TOKEN_PROVIDED_TO_PPG) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: An invalid authentication token was passed \" + \"to the PPG internally during the destroy channel. Report this issue to the BlackBerry support team.\");\n          } else if (result == blackberry.push.PushService.PUSH_TRANSPORT_UNAVAILABLE) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: Destroy channel failed as the push transport \" + \"is unavailable. Verify your mobile network and/or Wi-Fi are turned on. If they are on, you will \" + \"be notified when the push transport is available again.\");\n          } else if (result == blackberry.push.PushService.PPG_SERVER_ERROR) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: Destroy channel failed as the PPG is \" + \"currently returning a server error. You will be notified when the PPG is available again.\");\n          } else if (result == blackberry.push.PushService.INVALID_PPG_URL) {\n            // This error code only applies to a consumer application using the public/BIS PPG\n            error(\"Error: The PPG URL was considered invalid during the destroy channel.\");\n          } else {\n            error(\"Error: Received error code (\" + result + \") from the destroy channel.\");\n          }\n        }\n      });\n    }\n  }\n};\nrequire(\"cordova/exec/proxy\").add(\"PushPlugin\", module.exports);\n"}